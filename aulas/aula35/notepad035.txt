// Atribuição via desestruturação

// ------------------------------------------------

1. Desestruturação de Arrays
Você pode extrair valores de um array e atribuí-los 
a variáveis de maneira mais compacta:

const numeros = [1, 2, 3];

// Sem desestruturação
const a = numeros[0];
const b = numeros[1];
const c = numeros[2];

// Com desestruturação
const [a, b, c] = numeros;


Você também pode ignorar valores e usar valores 
padrão:

const [x, , z = 5] = [1, 2];
console.log(x); // 1
console.log(z); // 5

----------------------------------------

2. Desestruturação de Objetos
Você pode extrair propriedades de um 
objeto e atribuí-las a variáveis com nomes 
correspondentes:

const pessoa = {
  nome: 'Ana',
  idade: 25,
  cidade: 'São Paulo'
};

// Sem desestruturação
const nome = pessoa.nome;
const idade = pessoa.idade;
const cidade = pessoa.cidade;

// Com desestruturação
const { nome, idade, cidade } = pessoa;


Você também pode renomear variáveis e definir valores 
padrão:

const { nome: nomePessoa, idade = 30 } = pessoa;
console.log(nomePessoa); // Ana
console.log(idade); // 25 (ou 30, se idade não estivesse presente)

----------------------------------------

3. Desestruturação em Parâmetros de Função
Você pode usar desestruturação diretamente 
nos parâmetros de uma função para extrair 
valores dos argumentos:

function mostrarPessoa({ nome, idade }) {
  console.log(`Nome: ${nome}, Idade: ${idade}`);
}

const pessoa = { nome: 'Carlos', idade: 28 };
mostrarPessoa(pessoa);


----------------------------------------

4. Desestruturação com Rest Operator
Você pode capturar o restante dos elementos com o operador rest ('...'):

const [primeiro, segundo, ...restantes] = [1, 2, 3, 4, 5];
console.log(primeiro); // 1
console.log(segundo); // 2
console.log(restantes); // [3, 4, 5]


Para objetos:

const { a, b, ...outros } = { a: 1, b: 2, c: 3, d: 4 };
console.log(a); // 1
console.log(b); // 2
console.log(outros); // { c: 3, d: 4 }

----------------------------------------

A desestruturação torna o código mais limpo e fácil de ler, 
especialmente quando se lida com dados complexos ou quando é 
necessário extrair múltiplos valores de uma estrutura de dados.

// ------------------------------------------------

let a = 'A'; // A
let b = 'B'; // B
let c = 'C'; // C
console.log(a, b, c); //A B C

[a, b, c] = [1, 2, 3];
// destruturação = array
console.log(a, b , c); //1 2 3

const numeros = [b, c, a];
[a, b, c] = numeros;
console.log(a, b, c); //2 3 1

const letras = [b, c, a];
[a, b, c] = letras; 
console.log(a, b, c); //3 1 2

// ------------------------------------------------

//               0  1  2  3  4  5  6  7  8       Índice
const numeros = [1, 2, 3, 4, 5, 6, 7, 8, 9]; //  Valor 
console.log(numeros[0], numeros[1]); // 1 2

const [primeiroNumero, segundoNumero] = numeros;
// desestruturação
console.log(primeiroNumero, segundoNumero); // 1 2

// ------------------------------------------------

// ... rest(resto), ... spread(espalhar ou distribuir)
const numeros = [1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000];
const [primeiroNumero, segundoNumero, terceiroNumero, ...resto] = numeros;
console.log(primeiroNumero, segundoNumero, terceiroNumero); // 1000 2000 3000
console.log(resto); // [ 4000, 5000, 6000, 7000, 8000, 9000 ]

const numeros = [1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000];
const [um,  , tres,  , cinco,  , sete, ...resto] = numeros;
console.log(um, tres, cinco, sete); // 1000 3000 5000 7000
console.log(resto); // [ 8000, 9000 ]

// ------------------------------------------------

//                    0           1          2
//                 0  1   2    0  1  2    0  1  2
const numeros = [ [1, 2 , 3], [4, 5, 6], [7, 8, 9] ];
console.log(numeros[1][0]); // 4

const [,[,,seis]] = numeros; 
console.log(seis); // 6

const [lista1, lista2, lista3] = numeros;
console.log(lista1[2], lista2[0], lista3[1]); // 3 4 8